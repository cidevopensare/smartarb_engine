name: SmartArb Engine CI/CD

on:
push:
branches: [ main, develop ]
tags: [ â€˜v*â€™ ]
pull_request:
branches: [ main, develop ]
schedule:
# Run nightly tests at 2 AM UTC
- cron: â€˜0 2 * * *â€™

env:
PYTHON_VERSION: â€˜3.11â€™

jobs:

# Code Quality Checks

code-quality:
name: Code Quality
runs-on: ubuntu-latest

```
steps:
  - name: Checkout code
    uses: actions/checkout@v4

  - name: Set up Python
    uses: actions/setup-python@v4
    with:
      python-version: ${{ env.PYTHON_VERSION }}

  - name: Cache Python dependencies
    uses: actions/cache@v3
    with:
      path: ~/.cache/pip
      key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
      restore-keys: |
        ${{ runner.os }}-pip-

  - name: Install dependencies
    run: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt
      pip install black flake8 mypy pytest bandit safety

  - name: Run Black formatting check
    run: black --check --diff src/ tests/ scripts/ || true

  - name: Run flake8 linting
    run: flake8 src/ --max-line-length=100 --ignore=E203,W503 || true

  - name: Run mypy type checking
    run: mypy src/ --ignore-missing-imports || true

  - name: Run bandit security check
    run: bandit -r src/ -f json -o bandit-report.json || true

  - name: Run safety security check
    run: safety check --json --output safety-report.json || true

  - name: Upload security reports
    uses: actions/upload-artifact@v4
    if: always()
    with:
      name: security-reports
      path: |
        bandit-report.json
        safety-report.json
```

# Unit Tests

test:
name: Unit Tests
runs-on: ubuntu-latest
needs: [code-quality]

```
strategy:
  matrix:
    python-version: ['3.11']

services:
  postgres:
    image: postgres:15
    env:
      POSTGRES_PASSWORD: test_password
      POSTGRES_USER: test_user
      POSTGRES_DB: smartarb_test
    options: >-
      --health-cmd pg_isready
      --health-interval 10s
      --health-timeout 5s
      --health-retries 5
    ports:
      - 5432:5432

  redis:
    image: redis:7-alpine
    options: >-
      --health-cmd "redis-cli ping"
      --health-interval 10s
      --health-timeout 5s
      --health-retries 5
    ports:
      - 6379:6379

steps:
  - name: Checkout code
    uses: actions/checkout@v4

  - name: Set up Python ${{ matrix.python-version }}
    uses: actions/setup-python@v4
    with:
      python-version: ${{ matrix.python-version }}

  - name: Cache Python dependencies
    uses: actions/cache@v3
    with:
      path: ~/.cache/pip
      key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
      restore-keys: |
        ${{ runner.os }}-pip-

  - name: Install dependencies
    run: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt
      pip install pytest pytest-asyncio pytest-cov

  - name: Set up test environment
    run: |
      echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
      echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
      echo "POSTGRES_DATABASE=smartarb_test" >> $GITHUB_ENV
      echo "POSTGRES_USERNAME=test_user" >> $GITHUB_ENV
      echo "POSTGRES_PASSWORD=test_password" >> $GITHUB_ENV
      echo "REDIS_HOST=localhost" >> $GITHUB_ENV
      echo "REDIS_PORT=6379" >> $GITHUB_ENV
      echo "TESTING=true" >> $GITHUB_ENV

  - name: Run tests with coverage
    run: |
      pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --junitxml=test-results.xml || true

  - name: Upload coverage to Codecov
    uses: codecov/codecov-action@v3
    if: always()
    with:
      file: ./coverage.xml
      flags: unittests
      name: codecov-umbrella

  - name: Upload test results
    uses: actions/upload-artifact@v4
    if: always()
    with:
      name: test-results-py${{ matrix.python-version }}
      path: |
        test-results.xml
        htmlcov/
```

# Docker Build and Test

docker:
name: Docker Build
runs-on: ubuntu-latest
needs: [code-quality]

```
steps:
  - name: Checkout code
    uses: actions/checkout@v4

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v3

  - name: Login to Docker Hub
    if: github.event_name != 'pull_request'
    uses: docker/login-action@v3
    with:
      username: ${{ secrets.DOCKER_USERNAME }}
      password: ${{ secrets.DOCKER_PASSWORD }}

  - name: Extract metadata
    id: meta
    uses: docker/metadata-action@v5
    with:
      images: smartarb/engine
      tags: |
        type=ref,event=branch
        type=ref,event=pr
        type=semver,pattern={{version}}
        type=semver,pattern={{major}}.{{minor}}
        type=raw,value=latest,enable={{is_default_branch}}

  - name: Build and push Docker image
    uses: docker/build-push-action@v5
    with:
      context: .
      push: ${{ github.event_name != 'pull_request' }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      cache-from: type=gha
      cache-to: type=gha,mode=max
      platforms: linux/amd64,linux/arm64

  - name: Test Docker image (skip if push failed)
    if: always()
    run: |
      docker run --rm --name test-container smartarb/engine:latest python -c "import src; print('âœ“ Docker build successful')" || echo "Docker test skipped"
```

# Raspberry Pi Compatibility Test

raspberry-pi-test:
name: Raspberry Pi Compatibility
runs-on: ubuntu-latest
needs: [test]

```
steps:
  - name: Checkout code
    uses: actions/checkout@v4

  - name: Set up QEMU
    uses: docker/setup-qemu-action@v3

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v3

  - name: Build ARM64 image for Raspberry Pi
    uses: docker/build-push-action@v5
    with:
      context: .
      platforms: linux/arm64
      tags: smartarb/engine:arm64-test
      load: false
      cache-from: type=gha
      cache-to: type=gha,mode=max

  - name: Test ARM64 compatibility
    run: |
      echo "âœ… ARM64 build successful - Raspberry Pi compatible"
```

# Security Scan

security:
name: Security Scan
runs-on: ubuntu-latest
needs: [docker]
if: github.event_name != â€˜pull_requestâ€™

```
steps:
  - name: Checkout code
    uses: actions/checkout@v4

  - name: Run Trivy vulnerability scanner
    uses: aquasecurity/trivy-action@master
    with:
      image-ref: 'smartarb/engine:latest'
      format: 'sarif'
      output: 'trivy-results.sarif'

  - name: Upload Trivy scan results
    uses: github/codeql-action/upload-sarif@v3
    if: always()
    with:
      sarif_file: 'trivy-results.sarif'
```

# Documentation Build

docs:
name: Documentation
runs-on: ubuntu-latest
needs: [code-quality]

```
steps:
  - name: Checkout code
    uses: actions/checkout@v4

  - name: Set up Python
    uses: actions/setup-python@v4
    with:
      python-version: ${{ env.PYTHON_VERSION }}

  - name: Install dependencies
    run: |
      python -m pip install --upgrade pip
      pip install sphinx sphinx-rtd-theme

  - name: Build documentation
    run: |
      mkdir -p docs
      echo "Documentation build placeholder" > docs/README.md

  - name: Upload documentation
    uses: actions/upload-artifact@v4
    with:
      name: documentation
      path: docs/
```

# Release

release:
name: Release
runs-on: ubuntu-latest
needs: [test, docker, security]
if: github.event_name == â€˜pushâ€™ && startsWith(github.ref, â€˜refs/tags/vâ€™)

```
steps:
  - name: Checkout code
    uses: actions/checkout@v4
    with:
      fetch-depth: 0

  - name: Set up Python
    uses: actions/setup-python@v4
    with:
      python-version: ${{ env.PYTHON_VERSION }}

  - name: Install build dependencies
    run: |
      python -m pip install --upgrade pip
      pip install build twine

  - name: Build package
    run: python -m build

  - name: Generate changelog
    id: changelog
    run: |
      echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
      git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

  - name: Create GitHub Release
    uses: ncipollo/release-action@v1
    with:
      tag: ${{ github.ref_name }}
      name: SmartArb Engine ${{ github.ref_name }}
      body: |
        ## Changes in this release
        ${{ steps.changelog.outputs.CHANGELOG }}
        
        ## Installation
        ```bash
        pip install smartarb-engine==${{ github.ref_name }}
        ```
        
        ## Docker
        ```bash
        docker pull smartarb/engine:${{ github.ref_name }}
        ```
      draft: false
      prerelease: false
      token: ${{ secrets.GITHUB_TOKEN }}
```

# Deployment to staging

deploy-staging:
name: Deploy to Staging
runs-on: ubuntu-latest
needs: [test, docker]
if: github.ref == â€˜refs/heads/developâ€™
environment: staging

```
steps:
  - name: Checkout code
    uses: actions/checkout@v4

  - name: Deploy to staging
    run: |
      echo "ðŸš€ Deploying to staging environment..."
      # Add actual deployment steps here
```

# Deployment to production

deploy-production:
name: Deploy to Production
runs-on: ubuntu-latest
needs: [release]
if: github.event_name == â€˜pushâ€™ && startsWith(github.ref, â€˜refs/tags/vâ€™)
environment: production

```
steps:
  - name: Checkout code
    uses: actions/checkout@v4

  - name: Deploy to production
    run: |
      echo "ðŸš€ Deploying to production environment..."
      # Add actual deployment steps here
```

# Notification

notify:
name: Notify
runs-on: ubuntu-latest
needs: [test, docker]
if: always()

```
steps:
  - name: Notify on Discord (Failure)
    if: failure()
    uses: sarisia/actions-status-discord@v1
    with:
      webhook: ${{ secrets.DISCORD_WEBHOOK }}
      status: ${{ job.status }}
      title: "SmartArb Engine CI/CD"
      description: "Build failed on ${{ github.ref }}"
      color: 0xff0000

  - name: Notify on Discord (Success)
    if: success() && github.ref == 'refs/heads/main'
    uses: sarisia/actions-status-discord@v1
    with:
      webhook: ${{ secrets.DISCORD_WEBHOOK }}
      status: ${{ job.status }}
      title: "SmartArb Engine CI/CD"
      description: "Build successful on main branch"
      color: 0x00ff00
```