# Pre-commit hooks for SmartArb Engine
# Ensures code quality and consistency before commits

repos:
  # Built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--unsafe]
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: fix-byte-order-marker
      - id: mixed-line-ending
      - id: requirements-txt-fixer

  # Python code formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=100]
        files: ^(src/|tests/|scripts/).*\.py$

  # Python import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=100]
        files: ^(src/|tests/|scripts/).*\.py$

  # Python linting with flake8
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=100, --ignore=E203,W503,E501]
        files: ^(src/|tests/|scripts/).*\.py$
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear
          - flake8-comprehensions

  # Python type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: [--ignore-missing-imports, --strict-optional]
        files: ^src/.*\.py$
        additional_dependencies: [types-all]

  # Security linting with bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, -x, tests/]
        files: ^src/.*\.py$

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types: [yaml]
        exclude: ^(monitoring/|docker-compose\.yml)

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: [--severity=warning]
        files: \.sh$

  # Python security checks
  - repo: https://github.com/pycqa/safety
    rev: 2.3.5
    hooks:
      - id: safety
        args: [--short-report]
        files: requirements.*\.txt$

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: .*/tests/.*|.*\.lock|.*\.log

  # Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Python docstring formatting
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        files: ^src/.*\.py$
        args: [--convention=google]

  # Check for common vulnerabilities
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: requirements.*\.txt$

# SmartArb-specific hooks
  - repo: local
    hooks:
      # Validate configuration files
      - id: validate-config
        name: Validate SmartArb configuration
        entry: python -m src.utils.config --validate
        language: system
        files: ^config/.*\.ya?ml$
        pass_filenames: false

      # Check API key placeholders
      - id: check-api-keys
        name: Check for exposed API keys
        entry: python scripts/check_secrets.py
        language: system
        files: ^(config/|\.env).*$
        pass_filenames: false

      # Validate Docker configuration
      - id: validate-docker
        name: Validate Docker configuration
        entry: docker-compose config
        language: system
        files: ^docker-compose\.ya?ml$
        pass_filenames: false

      # Check requirements consistency
      - id: check-requirements
        name: Check requirements consistency
        entry: python scripts/check_requirements.py
        language: system
        files: requirements.*\.txt$
        pass_filenames: false

      # Test import structure
      - id: test-imports
        name: Test Python imports
        entry: python -c "import src; print('âœ“ Import structure valid')"
        language: system
        files: ^src/.*\.py$
        pass_filenames: false

      # Validate Raspberry Pi scripts
      - id: validate-rpi-scripts
        name: Validate Raspberry Pi scripts
        entry: bash -n
        language: system
        files: ^scripts/.*\.sh$

      # Check for TODO/FIXME comments in production code
      - id: check-todos
        name: Check for TODO/FIXME in production code
        entry: python scripts/check_todos.py
        language: system
        files: ^src/.*\.py$
        pass_filenames: false

# Configuration
default_stages: [commit]
fail_fast: true

# Custom configuration for specific hooks
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [mypy, bandit, safety, detect-secrets]  # Skip resource-intensive hooks in CI
  submodules: false
