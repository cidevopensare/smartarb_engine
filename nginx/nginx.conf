# SmartArb Engine - Secure Nginx Configuration
# High-performance and secure reverse proxy for SmartArb Engine
# Optimized for Raspberry Pi 5 and production deployment

# =============================================================================
# MAIN CONTEXT
# =============================================================================
user nginx;
worker_processes auto;  # Use all available CPU cores
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Worker connections and file limits
events {
    worker_connections 1024;  # Suitable for RPi 5
    use epoll;
    multi_accept on;
    worker_rlimit_nofile 2048;
}

# =============================================================================
# HTTP CONTEXT
# =============================================================================
http {
    # MIME types
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # Security logging format
    log_format security '$time_iso8601 $remote_addr $request_method $scheme '
                       '$request_uri $server_protocol $status $body_bytes_sent '
                       '$request_time "$user_agent" "$http_referer"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # =============================================================================
    # PERFORMANCE OPTIMIZATION
    # =============================================================================
    
    # Basic performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;  # Hide nginx version

    # Buffer sizes (optimized for RPi)
    client_body_buffer_size 16k;
    client_header_buffer_size 1k;
    client_max_body_size 1m;  # Limit request size
    large_client_header_buffers 2 1k;

    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    keepalive_requests 100;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;

    # =============================================================================
    # SECURITY HEADERS
    # =============================================================================
    
    # Security headers that will be added to all responses
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; frame-ancestors 'none';" always;
    
    # Remove server signature
    more_clear_headers Server;
    more_set_headers "Server: SmartArb";

    # =============================================================================
    # RATE LIMITING
    # =============================================================================
    
    # Define rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/m;      # API endpoints
    limit_req_zone $binary_remote_addr zone=login:10m rate=3r/m;     # Login attempts  
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/m;  # General requests

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # =============================================================================
    # GEO BLOCKING (Optional - uncomment to enable)
    # =============================================================================
    
    # Uncomment and customize based on your needs
    # geo $allowed_country {
    #     default 0;
    #     # Allow specific countries (ISO 3166-1 alpha-2)
    #     US 1;  # United States
    #     CA 1;  # Canada
    #     GB 1;  # United Kingdom
    #     DE 1;  # Germany
    #     FR 1;  # France
    #     JP 1;  # Japan
    #     AU 1;  # Australia
    # }

    # =============================================================================
    # BLACKLIST / SECURITY RULES
    # =============================================================================
    
    # Block common attack patterns
    map $request_uri $blocked_uri {
        ~*\.(aspx?|php|jsp|cgi)$ 1;          # Block dynamic file extensions
        ~*/(wp-|wordpress|admin|phpmyadmin)  1;  # Block common CMS paths
        ~*/\.env                             1;  # Block .env file access
        ~*/\.git                            1;  # Block git directory access
        ~*/config/                          1;  # Block config directory
        ~*/secrets/                         1;  # Block secrets directory
        default                             0;
    }

    # Block bad user agents
    map $http_user_agent $blocked_agent {
        ~*Nikto                           1;  # Security scanner
        ~*sqlmap                          1;  # SQL injection tool
        ~*WPScan                          1;  # WordPress scanner
        ~*Python-urllib                   1;  # Often used by bots
        ~*Python-requests                 1;  # Often used by bots
        ~*curl                           1;  # Command line tool (be careful)
        ~*wget                           1;  # Command line tool (be careful)
        default                          0;
    }

    # Block bad HTTP methods
    map $request_method $blocked_method {
        ~*^(TRACE|DELETE|PUT)$            1;
        default                           0;
    }

    # =============================================================================
    # UPSTREAM DEFINITIONS
    # =============================================================================
    
    # SmartArb Engine application servers
    upstream smartarb_backend {
        # Main application
        server 127.0.0.1:8000 max_fails=3 fail_timeout=30s;
        
        # Backup servers (if available)
        # server 127.0.0.1:8001 backup;
        
        # Health checks
        keepalive 2;
    }

    # Monitoring services
    upstream prometheus {
        server 127.0.0.1:9090 max_fails=2 fail_timeout=30s;
    }

    upstream grafana {
        server 127.0.0.1:3000 max_fails=2 fail_timeout=30s;
    }

    # =============================================================================
    # DEFAULT SERVER (CATCH-ALL)
    # =============================================================================
    
    # Default server to catch undefined hosts
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        
        server_name _;
        
        # SSL configuration for default server
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_private_key /etc/nginx/ssl/default.key;
        
        # Return 444 (connection closed) for undefined hosts
        return 444;
    }

    # =============================================================================
    # SMARTARB ENGINE - MAIN SERVER
    # =============================================================================
    
    server {
        listen 80;
        listen [::]:80;
        server_name smartarb.local localhost;  # Update with your domain
        
        # Security headers
        include /etc/nginx/snippets/security-headers.conf;
        
        # Redirect HTTP to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }

        # Allow Let's Encrypt challenges
        location ^~ /.well-known/acme-challenge/ {
            allow all;
            root /var/www/letsencrypt;
            default_type "text/plain";
            try_files $uri =404;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name smartarb.local localhost;  # Update with your domain

        # =============================================================================
        # SSL CONFIGURATION
        # =============================================================================
        
        # SSL certificates
        ssl_certificate /etc/nginx/ssl/smartarb.crt;
        ssl_private_key /etc/nginx/ssl/smartarb.key;
        ssl_certificate_key /etc/nginx/ssl/smartarb.key;

        # SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK;
        ssl_prefer_server_ciphers off;
        ssl_ecdh_curve secp384r1;

        # SSL session settings
        ssl_session_timeout 10m;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # HSTS (HTTP Strict Transport Security)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # =============================================================================
        # SECURITY RULES
        # =============================================================================
        
        # Block malicious requests
        if ($blocked_uri) {
            return 444;
        }
        
        if ($blocked_agent) {
            return 444;
        }
        
        if ($blocked_method) {
            return 405;
        }

        # Rate limiting
        limit_conn conn_limit_per_ip 10;
        limit_req zone=general burst=20 nodelay;

        # =============================================================================
        # APPLICATION ROUTES
        # =============================================================================
        
        # Health check endpoint (public)
        location = /health {
            access_log off;
            limit_req zone=api burst=5 nodelay;
            
            proxy_pass http://smartarb_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check specific settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # API endpoints (protected)
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            # Additional security for API
            add_header X-API-Server "SmartArb" always;
            
            proxy_pass http://smartarb_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # Buffer settings for API
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        # WebSocket support (for real-time updates)
        location /ws/ {
            proxy_pass http://smartarb_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific settings
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }

        # Admin interface (if any) - more restrictive
        location /admin/ {
            # Allow only specific IPs
            # allow 192.168.1.0/24;
            # allow 127.0.0.1;
            # deny all;
            
            # Basic auth (optional additional layer)
            # auth_basic "SmartArb Admin";
            # auth_basic_user_file /etc/nginx/.htpasswd;
            
            limit_req zone=login burst=3 nodelay;
            
            proxy_pass http://smartarb_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Static files (if serving any)
        location /static/ {
            alias /var/www/smartarb/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # Security for static files
            location ~* \.(php|jsp|aspx|cgi)$ {
                deny all;
            }
        }

        # Deny access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ /(config|secrets|logs|backups)/ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Main application (catch-all)
        location / {
            limit_req zone=general burst=20 nodelay;
            
            proxy_pass http://smartarb_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 60s;
            
            # Error handling
            error_page 502 503 504 /50x.html;
        }

        # Custom error pages
        location = /50x.html {
            root /var/www/html;
            internal;
        }
    }

    # =============================================================================
    # MONITORING SERVICES (INTERNAL ACCESS)
    # =============================================================================
    
    # Prometheus (metrics)
    server {
        listen 9090 ssl;
        server_name monitoring.smartarb.local;
        
        ssl_certificate /etc/nginx/ssl/smartarb.crt;
        ssl_private_key /etc/nginx/ssl/smartarb.key;
        
        # Restrict access to internal networks
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.0.0.0/8;
        deny all;
        
        location / {
            proxy_pass http://prometheus;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Grafana (dashboards)
    server {
        listen 3000 ssl;
        server_name grafana.smartarb.local;
        
        ssl_certificate /etc/nginx/ssl/smartarb.crt;
        ssl_private_key /etc/nginx/ssl/smartarb.key;
        
        # Restrict access to internal networks
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.0.0.0/8;
        deny all;
        
        location / {
            proxy_pass http://grafana;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Grafana specific headers
            proxy_set_header X-Forwarded-Host $host:$server_port;
            proxy_set_header X-Forwarded-Server $host;
        }
    }
}

# =============================================================================
# STREAM CONTEXT (TCP/UDP Load Balancing)
# =============================================================================

stream {
    # Define upstream for database connections (if needed)
    upstream postgres_backend {
        server 127.0.0.1:5432;
    }
    
    # PostgreSQL proxy (optional, for external database access)
    server {
        listen 5433;
        proxy_pass postgres_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        
        # Restrict access
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        deny all;
    }
}
